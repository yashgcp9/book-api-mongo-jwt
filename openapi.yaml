openapi: 3.0.3
info:
  title: Book API (MongoDB + JWT)
  version: 1.0.0
servers:
  - url: https://localhost:3000
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security: []
paths:
  /api/health:
    get:
      summary: Health check
      responses:
        '200':
          description: OK
  /api/auth/register:
    post:
      summary: Register a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 8 }
              required: [email, password]
      responses:
        '201': { description: Created }
        '400': { description: Bad Request }
        '409': { description: Conflict }
  /api/auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
                password: { type: string }
              required: [email, password]
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
  /api/auth/me:
    get:
      summary: Get current user
      security: [{ bearerAuth: [] }]
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
  /api/books:
    get:
      summary: List books
      parameters:
        - in: query
          name: q
          schema: { type: string }
      responses:
        '200': { description: OK }
    post:
      summary: Create a book
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                author: { type: string }
                year: { type: integer }
                tags:
                  type: array
                  items: { type: string }
              required: [title]
      responses:
        '201': { description: Created }
        '401': { description: Unauthorized }
  /api/books/{id}:
    get:
      summary: Get a book by id
      parameters: [{ in: path, name: id, required: true, schema: { type: string } }]
      responses:
        '200': { description: OK }
        '404': { description: Not Found }
    put:
      summary: Replace a book
      security: [{ bearerAuth: [] }]
      parameters: [{ in: path, name: id, required: true, schema: { type: string } }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                author: { type: string }
                year: { type: integer }
                tags:
                  type: array
                  items: { type: string }
              required: [title]
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
        '404': { description: Not Found }
    patch:
      summary: Patch a book
      security: [{ bearerAuth: [] }]
      parameters: [{ in: path, name: id, required: true, schema: { type: string } }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
        '404': { description: Not Found }
    delete:
      summary: Delete a book
      security: [{ bearerAuth: [] }]
      parameters: [{ in: path, name: id, required: true, schema: { type: string } }]
      responses:
        '204': { description: No Content }
        '401': { description: Unauthorized }
        '404': { description: Not Found }
